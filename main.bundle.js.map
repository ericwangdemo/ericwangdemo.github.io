{"version":3,"sources":["D:/workspace/demos/ngrx-todo/src/$_lazy_route_resource lazy","D:/workspace/demos/ngrx-todo/src/app/app.component.css","D:/workspace/demos/ngrx-todo/src/app/app.component.html","D:/workspace/demos/ngrx-todo/src/app/app.component.ts","D:/workspace/demos/ngrx-todo/src/app/app.module.ts","D:/workspace/demos/ngrx-todo/src/app/core/ngrx/reducer.ts","D:/workspace/demos/ngrx-todo/src/app/core/ngrx/utils.ts","D:/workspace/demos/ngrx-todo/src/app/mock-api/mock-todo.ts","D:/workspace/demos/ngrx-todo/src/app/routes.ts","D:/workspace/demos/ngrx-todo/src/environments/environment.ts","D:/workspace/demos/ngrx-todo/src/main.ts"],"names":[],"mappings":"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","file":"main.bundle.js","sourcesContent":["var map = {\n\t\"./pages/todo-page/todo-page.module\": [\n\t\t\"../../../../../src/app/pages/todo-page/todo-page.module.ts\",\n\t\t\"todo-page.module\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids)\n\t\treturn Promise.reject(new Error(\"Cannot find module '\" + req + \"'.\"));\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(ids[0]);\n\t});\n};\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"../../../../../src/$$_lazy_route_resource lazy recursive\";\nmodule.exports = webpackAsyncContext;\n\n\n//////////////////\n// WEBPACK FOOTER\n// D:/workspace/demos/ngrx-todo/src/$$_lazy_route_resource lazy\n// module id = ../../../../../src/$$_lazy_route_resource lazy recursive\n// module chunks = main","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// D:/workspace/demos/ngrx-todo/src/app/app.component.css\n// module id = ../../../../../src/app/app.component.css\n// module chunks = main","module.exports = \"<router-outlet></router-outlet>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// D:/workspace/demos/ngrx-todo/src/app/app.component.html\n// module id = ../../../../../src/app/app.component.html\n// module chunks = main","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'app';\n}\n\n\n\n// WEBPACK FOOTER //\n// D:/workspace/demos/ngrx-todo/src/app/app.component.ts","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from './app.component';\n\nimport { HttpModule } from '@angular/http';\nimport { RouterModule } from '@angular/router';\nimport { routes } from './routes';\n\n// ngrx\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\nimport {\n  StoreRouterConnectingModule,\n  RouterStateSerializer,\n} from '@ngrx/router-store';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { reducers, metaReducers } from './core/ngrx/reducer';\nimport { CustomRouterStateSerializer } from './core/ngrx/utils';\n\nimport { InMemoryWebApiModule } from 'angular-in-memory-web-api';\nimport { InMemTodoService } from './mock-api/mock-todo';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpModule,\n    RouterModule.forRoot(routes),\n    StoreModule.forRoot(reducers, { metaReducers }),\n    StoreRouterConnectingModule,\n    EffectsModule.forRoot([]),\n    // Note that you must instrument after importing StoreModule\n    StoreDevtoolsModule.instrument({\n      maxAge: 25 //  Retains last 25 states\n    }),\n    InMemoryWebApiModule.forRoot(InMemTodoService)\n  ],\n  providers: [\n    { provide: RouterStateSerializer, useClass: CustomRouterStateSerializer },\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n\n// WEBPACK FOOTER //\n// D:/workspace/demos/ngrx-todo/src/app/app.module.ts","import {\n    ActionReducerMap,\n    createSelector,\n    createFeatureSelector,\n    ActionReducer,\n    MetaReducer,\n} from '@ngrx/store';\nimport { environment } from '../../../environments/environment';\nimport { RouterStateUrl } from './utils';\nimport * as fromRouter from '@ngrx/router-store';\n\n/**\n * storeFreeze prevents state from being mutated. When mutation occurs, an\n * exception will be thrown. This is useful during development mode to\n * ensure that none of the reducers accidentally mutates the state.\n */\nimport { storeFreeze } from 'ngrx-store-freeze';\n\n/**\n * Every reducer module's default export is the reducer function itself. In\n * addition, each module should export a type or interface that describes\n * the state of the reducer plus any selector functions. The `* as`\n * notation packages up all of the exports into a single object.\n */\n\n/**\n * The following line about layout is commented, but you can refer to\n * https://github.com/ngrx/platform/blob/master/example-app/app/reducers/index.ts\n * for detailed implementations\n */\n\n// import * as fromLayout from '../core/reducers/layout';\n\n/**\n * As mentioned, we treat each reducer like a table in a database. This means\n * our top level state interface is just a map of keys to inner state types.\n */\nexport interface State {\n    // layout: fromLayout.State;\n    routerReducer: fromRouter.RouterReducerState<RouterStateUrl>;\n}\n\n/**\n * Our state is composed of a map of action reducer functions.\n * These reducer functions are called with each dispatched action\n * and the current or initial state and return a new immutable state.\n */\nexport const reducers: ActionReducerMap<State> = {\n    // layout: fromLayout.reducer,\n    routerReducer: fromRouter.routerReducer,\n};\n\n// console.log all actions\nexport function logger(reducer: ActionReducer<State>): ActionReducer<State> {\n    return function (state: State, action: any): State {\n        console.log('state', state);\n        console.log('action', action);\n\n        return reducer(state, action);\n    };\n}\n\n/**\n * By default, @ngrx/store uses combineReducers with the reducer map to compose\n * the root meta-reducer. To add more meta-reducers, provide an array of meta-reducers\n * that will be composed to form the root meta-reducer.\n */\nexport const metaReducers: MetaReducer<State>[] = !environment.production\n    ? [logger, storeFreeze]\n    : [];\n\n/**\n * Layout Reducers\n */\n// export const getLayoutState = createFeatureSelector<fromLayout.State>('layout');\n\n// export const getShowSidenav = createSelector(\n//     getLayoutState,\n//     fromLayout.getShowSidenav\n// );\n\n\n\n// WEBPACK FOOTER //\n// D:/workspace/demos/ngrx-todo/src/app/core/ngrx/reducer.ts","import { RouterStateSerializer } from '@ngrx/router-store';\nimport { RouterStateSnapshot, Params } from '@angular/router';\n\n/**\n * The RouterStateSerializer takes the current RouterStateSnapshot\n * and returns any pertinent information needed. The snapshot contains\n * all information about the state of the router at the given point in time.\n * The entire snapshot is complex and not always needed. In this case, you only\n * need the URL and query parameters from the snapshot in the store. Other items could be\n * returned such as route parameters and static route data.\n */\n\nexport interface RouterStateUrl {\n    url: string;\n    queryParams: Params;\n}\n\nexport class CustomRouterStateSerializer\n    implements RouterStateSerializer<RouterStateUrl> {\n    serialize(routerState: RouterStateSnapshot): RouterStateUrl {\n        const { url } = routerState;\n        const queryParams = routerState.root.queryParams;\n\n        return { url, queryParams };\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// D:/workspace/demos/ngrx-todo/src/app/core/ngrx/utils.ts","import { InMemoryDbService } from 'angular-in-memory-web-api';\n\nexport class InMemTodoService implements InMemoryDbService {\n    createDb() {\n        const todos = [\n            { id: 1, title: 'todo1', completed: true },\n            { id: 2, title: 'todo2', completed: false },\n            { id: 3, title: 'todo3', completed: true },\n            { id: 4, title: 'todo4', completed: false }\n        ];\n        return { todos };\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// D:/workspace/demos/ngrx-todo/src/app/mock-api/mock-todo.ts","import { Routes } from '@angular/router';\n\nexport const routes: Routes = [\n    {\n        path: '',\n        loadChildren: './pages/todo-page/todo-page.module#TodoPageModule',\n    }\n];\n\n\n\n// WEBPACK FOOTER //\n// D:/workspace/demos/ngrx-todo/src/app/routes.ts","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n\n\n\n// WEBPACK FOOTER //\n// D:/workspace/demos/ngrx-todo/src/environments/environment.ts","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n\n\n\n// WEBPACK FOOTER //\n// D:/workspace/demos/ngrx-todo/src/main.ts"],"sourceRoot":"webpack:///"}